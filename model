def matrix_2(sistema):
    matrix = []
    for i in range(2):
        matrix.append([])
        if "x" not in sistema[i]:
            matrix[i].append(0)
        else:
            if sistema[i].index("x") < sistema[i].index("y"):
                a = sistema[i][:sistema[i].index("x")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            else:
                a = sistema[i][sistema[i].index("y")+1:sistema[i].index("x")]
                if a == "+":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    if a != "+" and "+" in a:
                        matrix[i].append(int(a[1:]))
                    elif a != "-" and "-" in a:
                        matrix[i].append(int(a))
        if "y" not in sistema[i]:
            matrix[i].append(0)
        else:
            if sistema[i].index("y") < sistema[i].index("x"):
                a = sistema[i][:sistema[i].index("y")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            else:
                a = sistema[i][sistema[i].index("x")+1:sistema[i].index("y")]
                if a == "+":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    if a != "+" and "+" in a:
                        matrix[i].append(int(a[1:]))
                    elif a != "-" and "-" in a:
                        matrix[i].append(int(a))
        a = sistema[i][sistema[i].index("=") + 1:]
        if "\r" in a:
            matrix[i].append(int(a[:-1]))
        else:
            matrix[i].append(int(a))
    return matrix


def matrix_3(sistema):
    matrix = []
    for i in range(3):
        matrix.append([])
        if "x" not in sistema[i]:
            matrix[i].append(0)
        else:
            if sistema[i].index("x") < sistema[i].index("y") and sistema[i].index("x") < sistema[i].index("z"):
                a = sistema[i][:sistema[i].index("x")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            elif sistema[i].index("y") < sistema[i].index("x") < sistema[i].index("z"):
                a = sistema[i][sistema[i].index("y")+1:sistema[i].index("x")]
            elif sistema[i].index("z") < sistema[i].index("x") < sistema[i].index("y"):
                a = sistema[i][sistema[i].index("z")+1:sistema[i].index("x")]
            elif sistema[i].index("y") < sistema[i].index("x") and sistema[i].index("z") < sistema[i].index("x") and sistema[i].index("y") < sistema[i].index("z"):
                a = sistema[i][sistema[i].index("z")+1:sistema[i].index("x")]
            elif sistema[i].index("y") < sistema[i].index("x") and sistema[i].index("z") < sistema[i].index("x") and sistema[i].index("y") > sistema[i].index("z"):
                a = sistema[i][sistema[i].index("y")+1:sistema[i].index("x")]
            if a == "+":
                matrix[i].append(1)
            elif a == "-":
                matrix[i].append(-1)
            else:
                if a != "+" and "+" in a:
                    matrix[i].append(int(a[1:]))
                elif a != "-" and "-" in a:
                    matrix[i].append(int(a))
        if "y" not in sistema[i]:
            matrix[i].append(0)
        else:
            if sistema[i].index("y") < sistema[i].index("x") and sistema[i].index("y") < sistema[i].index("z"):
                a = sistema[i][:sistema[i].index("y")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            elif sistema[i].index("x") < sistema[i].index("y") < sistema[i].index("z"):
                a = sistema[i][sistema[i].index("x") + 1:sistema[i].index("y")]
            elif sistema[i].index("z") < sistema[i].index("y") < sistema[i].index("x"):
                a = sistema[i][sistema[i].index("z") + 1:sistema[i].index("y")]
            elif sistema[i].index("x") < sistema[i].index("y") and sistema[i].index("z") < sistema[i].index("y") and sistema[i].index("x") < sistema[i].index("z"):
                a = sistema[i][sistema[i].index("z") + 1:sistema[i].index("y")]
            elif sistema[i].index("x") < sistema[i].index("y") and sistema[i].index("z") < sistema[i].index("y") and sistema[i].index("x") > sistema[i].index("z"):
                a = sistema[i][sistema[i].index("x") + 1:sistema[i].index("y")]
            if a == "+":
                matrix[i].append(1)
            elif a == "-":
                matrix[i].append(-1)
            else:
                if a != "+" and "+" in a:
                    matrix[i].append(int(a[1:]))
                elif a != "-" and "-" in a:
                    matrix[i].append(int(a))
        if "z" not in sistema[i]:
            matrix[i].append(0)
        else:
            if sistema[i].index("z") < sistema[i].index("x") and sistema[i].index("z") < sistema[i].index("y"):
                a = sistema[i][:sistema[i].index("z")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            elif sistema[i].index("x") < sistema[i].index("z") < sistema[i].index("y"):
                a = sistema[i][sistema[i].index("x") + 1:sistema[i].index("z")]
            elif sistema[i].index("y") < sistema[i].index("z") < sistema[i].index("x"):
                a = sistema[i][sistema[i].index("y") + 1:sistema[i].index("z")]
            elif sistema[i].index("x") < sistema[i].index("z") and sistema[i].index("y") < sistema[i].index("z") and sistema[i].index("x") < sistema[i].index("y"):
                a = sistema[i][sistema[i].index("y") + 1:sistema[i].index("z")]
            elif sistema[i].index("x") < sistema[i].index("z") and sistema[i].index("y") < sistema[i].index("z") and sistema[i].index("x") > sistema[i].index("y"):
                a = sistema[i][sistema[i].index("x") + 1:sistema[i].index("z")]
            if a == "+":
                matrix[i].append(1)
            elif a == "-":
                matrix[i].append(-1)
            else:
                if a != "+" and "+" in a:
                    matrix[i].append(int(a[1:]))
                elif a != "-" and "-" in a:
                    matrix[i].append(int(a))
        a = sistema[i][sistema[i].index("=") + 1:]
        if "\r" in a:
            matrix[i].append(int(a[:-1]))
        else:
            matrix[i].append(int(a))
    return matrix


def kramer_2(matrix):
    matrix_delt = [matrix[0][:2], matrix[1][:2]]
    matrix_deltx = [[matrix[0][2], matrix[0][1]], [matrix[1][2], matrix[1][1]]]
    matrix_delty = [[matrix[0][0], matrix[0][2]], [matrix[1][0], matrix[1][2]]]
    delt = f"({matrix_delt[0][0]}*{matrix_delt[1][1]}) - ({matrix_delt[0][1]}*{matrix_delt[1][0]})"
    deltx = f"({matrix_deltx[0][0]}*{matrix_deltx[1][1]}) - ({matrix_deltx[0][1]}*{matrix_deltx[1][0]})"
    delty = f"({matrix_delty[0][0]}*{matrix_delty[1][1]}) - ({matrix_delty[0][1]}*{matrix_delty[1][0]})"
    delt_num = (matrix_delt[0][0]*matrix_delt[1][1]) - (matrix_delt[0][1]*matrix_delt[1][0])
    deltx_num = (matrix_deltx[0][0]*matrix_deltx[1][1]) - (matrix_deltx[0][1]*matrix_deltx[1][0])
    delty_num = (matrix_delty[0][0]*matrix_delty[1][1]) - (matrix_delty[0][1]*matrix_delty[1][0])
    x = deltx_num / delt_num
    y = delty_num / delt_num
    return matrix_delt, matrix_deltx, matrix_delty, delt, deltx, delty, delt_num, deltx_num, delty_num, x, y


def kramer_3(matrix):
    matrix_delt = [matrix[0][:3], matrix[1][:3], matrix[2][:3]]
    matrix_deltx = [[matrix[0][3], matrix[0][1], matrix[0][2]], [matrix[1][3], matrix[1][1], matrix[1][2]], [matrix[2][3], matrix[2][1], matrix[2][2]]]
    matrix_delty = [[matrix[0][0], matrix[0][3], matrix[0][2]], [matrix[1][0], matrix[1][3], matrix[1][2]], [matrix[2][0], matrix[2][3], matrix[2][2]]]
    matrix_deltz = [[matrix[0][0], matrix[0][1], matrix[0][3]], [matrix[1][0], matrix[1][1], matrix[1][3]], [matrix[2][0], matrix[2][1], matrix[2][3]]]
    delt_tr_dp = f"({matrix_delt[0][0]} * {matrix_delt[1][1]} * {matrix_delt[2][2]}) + ({matrix_delt[0][1]} * {matrix_delt[1][2]} * {matrix_delt[2][0]}) + ({matrix_delt[0][2]} * {matrix_delt[1][0]} * {matrix_delt[2][1]}) - ({matrix_delt[0][2]} * {matrix_delt[1][1]} * {matrix_delt[2][0]}) - ({matrix_delt[0][1]} * {matrix_delt[1][0]} * {matrix_delt[2][2]}) - ({matrix_delt[0][0]} * {matrix_delt[1][2]} * {matrix_delt[2][1]})"
    deltx_tr_dp = f"({matrix_deltx[0][0]} * {matrix_deltx[1][1]} * {matrix_deltx[2][2]}) + ({matrix_deltx[0][1]} * {matrix_deltx[1][2]} * {matrix_deltx[2][0]}) + ({matrix_deltx[0][2]} * {matrix_deltx[1][0]} * {matrix_deltx[2][1]}) - ({matrix_deltx[0][2]} * {matrix_deltx[1][1]} * {matrix_deltx[2][0]}) - ({matrix_deltx[0][1]} * {matrix_deltx[1][0]} * {matrix_deltx[2][2]}) - ({matrix_deltx[0][0]} * {matrix_deltx[1][2]} * {matrix_deltx[2][1]})"
    delty_tr_dp = f"({matrix_delty[0][0]} * {matrix_delty[1][1]} * {matrix_delty[2][2]}) + ({matrix_delty[0][1]} * {matrix_delty[1][2]} * {matrix_delty[2][0]}) + ({matrix_delty[0][2]} * {matrix_delty[1][0]} * {matrix_delty[2][1]}) - ({matrix_delty[0][2]} * {matrix_delty[1][1]} * {matrix_delty[2][0]}) - ({matrix_delty[0][1]} * {matrix_delty[1][0]} * {matrix_delty[2][2]}) - ({matrix_delty[0][0]} * {matrix_delty[1][2]} * {matrix_delty[2][1]})"
    deltz_tr_dp = f"({matrix_deltz[0][0]} * {matrix_deltz[1][1]} * {matrix_deltz[2][2]}) + ({matrix_deltz[0][1]} * {matrix_deltz[1][2]} * {matrix_deltz[2][0]}) + ({matrix_deltz[0][2]} * {matrix_deltz[1][0]} * {matrix_deltz[2][1]}) - ({matrix_deltz[0][2]} * {matrix_deltz[1][1]} * {matrix_deltz[2][0]}) - ({matrix_deltz[0][1]} * {matrix_deltz[1][0]} * {matrix_deltz[2][2]}) - ({matrix_deltz[0][0]} * {matrix_deltz[1][2]} * {matrix_deltz[2][1]})"
    delt_num = (matrix_delt[0][0] * matrix_delt[1][1] * matrix_delt[2][2]) + (matrix_delt[0][1] * matrix_delt[1][2] * matrix_delt[2][0]) + (matrix_delt[0][2] * matrix_delt[1][0] * matrix_delt[2][1]) - (matrix_delt[0][2] * matrix_delt[1][1] * matrix_delt[2][0]) - (matrix_delt[0][1] * matrix_delt[1][0] * matrix_delt[2][2]) - (matrix_delt[0][0] * matrix_delt[1][2] * matrix_delt[2][1])
    deltx_num = (matrix_deltx[0][0] * matrix_deltx[1][1] * matrix_deltx[2][2]) + (matrix_deltx[0][1] * matrix_deltx[1][2] * matrix_deltx[2][0]) + (matrix_deltx[0][2] * matrix_deltx[1][0] * matrix_deltx[2][1]) - (matrix_deltx[0][2] * matrix_deltx[1][1] * matrix_deltx[2][0]) - (matrix_deltx[0][1] * matrix_deltx[1][0] * matrix_deltx[2][2]) - (matrix_deltx[0][0] * matrix_deltx[1][2] * matrix_deltx[2][1])
    delty_num = (matrix_delty[0][0] * matrix_delty[1][1] * matrix_delty[2][2]) + (matrix_delty[0][1] * matrix_delty[1][2] * matrix_delty[2][0]) + (matrix_delty[0][2] * matrix_delty[1][0] * matrix_delty[2][1]) - (matrix_delty[0][2] * matrix_delty[1][1] * matrix_delty[2][0]) - (matrix_delty[0][1] * matrix_delty[1][0] * matrix_delty[2][2]) - (matrix_delty[0][0] * matrix_delty[1][2] * matrix_delty[2][1])
    deltz_num = (matrix_deltz[0][0] * matrix_deltz[1][1] * matrix_deltz[2][2]) + (matrix_deltz[0][1] * matrix_deltz[1][2] * matrix_deltz[2][0]) + (matrix_deltz[0][2] * matrix_deltz[1][0] * matrix_deltz[2][1]) - (matrix_deltz[0][2] * matrix_deltz[1][1] * matrix_deltz[2][0]) - (matrix_deltz[0][1] * matrix_deltz[1][0] * matrix_deltz[2][2]) - (matrix_deltz[0][0] * matrix_deltz[1][2] * matrix_deltz[2][1])
    x = deltx_num / delt_num
    y = delty_num / delt_num
    z = deltz_num / delt_num
    return matrix_delt, matrix_deltx, matrix_delty, matrix_deltz, delt_tr_dp, deltx_tr_dp, delty_tr_dp, deltz_tr_dp, delt_num, deltx_num, delty_num,deltz_num, x, y, z


def ansver_kramer(e,sistem):
    try:
        sistems = sistem.split("\n")
    except:
        return "ERROR"
    try:
        if len(sistem.value) == 2:
            matrix_delt, matrix_deltx, matrix_delty, delt, deltx, delty, delt_num, deltx_num, delty_num, x, y = kramer_2(
                matrix_2(sistems))
            matrix = matrix_2(sistems)
            return ["Матрица:", '\n'.join('     '.join(map(str, row)) for row in matrix), "Определитель:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_delt), "Определитель X:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_deltx), "Определитель Y:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_delty),
                    f"Δ   =  {delt}   = {delt_num}", f"Δx  =  {deltx}  = {deltx_num}", f"Δy  =  {delty}  = {delty_num}",
                    f"x  =  Δx/Δ  = {deltx_num}/{delt_num}  =  {x}", f"y  =  Δy/Δ  = {delty_num}/{delt_num}  =  {y}"]
        else:
            matrix_delt, matrix_deltx, matrix_delty, matrix_deltz, delt_tr_dp, deltx_tr_dp, delty_tr_dp, deltz_tr_dp, delt_num, deltx_num, delty_num, deltz_num, x, y, z = kramer_3(
                matrix_3(sistems))
            matrix = matrix_3(sistems)
            return ["Матрица:", '\n'.join('     '.join(map(str, row)) for row in matrix), "Определитель:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_delt), "Определитель X:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_deltx), "Определитель Y:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_delty), "Определитель Z:",
                    '\n'.join('     '.join(map(str, row)) for row in matrix_deltz),
                    f"Δ   =  {delt_tr_dp}   = {delt_num}", f"Δx  =  {deltx_tr_dp}  = {deltx_num}",
                    f"Δy  =  {delty_tr_dp}  = {delty_num}", f"Δz  =  {deltz_tr_dp}  = {deltz_num}",
                    f"x  =  Δx/Δ  = {deltx_num}/{delt_num}  =  {x}",
                    f"y  =  Δy/Δ  = {delty_num}/{delt_num}  =  {y}",
                    f"z  =  Δz/Δ  = {deltz_num}/{delt_num}  =  {z}"]
    except:
        return "ERROR"
