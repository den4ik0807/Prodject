def matrix_2(system):
    try:
        matrix = []
        for i in range(2):
            matrix.append([])
            if "x" not in system[i]:
                matrix[i].append(0)
                a = system[i][:system[i].index("y")]
                if a == "":
                    matrix[i].append(1)
                elif a == "-":
                    matrix[i].append(-1)
                else:
                    matrix[i].append(int(a))
            else:
                if "y" not in system[i]:
                    a = system[i][:system[i].index("x")]
                    if a == "":
                        matrix[i].append(1)
                    elif a == "-":
                        matrix[i].append(-1)
                    else:
                        matrix[i].append(int(a))
                    matrix[i].append(0)
                else:
                    if system[i].index("x") < system[i].index("y"):
                        a = system[i][:system[i].index("x")]
                        if a == "":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            matrix[i].append(int(a))
                        a = system[i][system[i].index("x") + 1:system[i].index("y")]
                        if a == "+":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            if a != "+" and "+" in a:
                                matrix[i].append(int(a[1:]))
                            elif a != "-" and "-" in a:
                                matrix[i].append(int(a))
                    elif system[i].index("x") > system[i].index("y"):
                        a = system[i][system[i].index("y") + 1:system[i].index("x")]
                        if a == "+":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            if a != "+" and "+" in a:
                                matrix[i].append(int(a[1:]))
                            elif a != "-" and "-" in a:
                                matrix[i].append(int(a))
                        a = system[i][:system[i].index("y")]
                        if a == "":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            matrix[i].append(int(a))
            a = system[i][system[i].index("=") + 1:]
            if "\r" in a:
                matrix[i].append(int(a[:-1]))
            else:
                matrix[i].append(int(a))
        return matrix
    except:
        return "ERROR"


def matrix_3(system):
    try:
        matrix = []
        for i in range(3):
            matrix.append([])
            if "x" not in system[i]:
                matrix[i].append(0)
                if "y" not in system[i]:
                    matrix[i].append(0)
                    a = system[i][:system[i].index("z")]
                    if a == "":
                        matrix[i].append(1)
                    elif a == "-":
                        matrix[i].append(-1)
                    else:
                        matrix[i].append(int(a))
                else:
                    if "z" not in system[i]:
                        a = system[i][:system[i].index("y")]
                        if a == "":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            matrix[i].append(int(a))
                        matrix[i].append(0)
                    else:
                        if system[i].index("y") < system[i].index("z"):
                            a = system[i][:system[i].index("y")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
                            a = system[i][system[i].index("y") + 1:system[i].index("z")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                        elif system[i].index("y") > system[i].index("z"):
                            a = system[i][system[i].index("z") + 1:system[i].index("y")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                            a = system[i][:system[i].index("z")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
            else:
                if "y" not in system[i]:
                    if "z" not in system[i]:
                        a = system[i][:system[i].index("x")]
                        if a == "":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            matrix[i].append(int(a))
                    else:
                        if system[i].index("x") < system[i].index("z"):
                            a = system[i][:system[i].index("x")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
                            matrix[i].append(0)
                            a = system[i][system[i].index("x") + 1:system[i].index("z")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                        elif system[i].index("x") > system[i].index("z"):
                            a = system[i][system[i].index("z") + 1:system[i].index("x")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                            matrix[i].append(0)
                            a = system[i][:system[i].index("z")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
                else:
                    if "z" not in system[i]:
                        if system[i].index("x") < system[i].index("y"):
                            a = system[i][:system[i].index("x")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
                            a = system[i][system[i].index("x") + 1:system[i].index("y")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                            matrix[i].append(0)
                        elif system[i].index("x") > system[i].index("y"):
                            a = system[i][system[i].index("y") + 1:system[i].index("x")]
                            if a == "+":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                if a != "+" and "+" in a:
                                    matrix[i].append(int(a[1:]))
                                elif a != "-" and "-" in a:
                                    matrix[i].append(int(a))
                            a = system[i][:system[i].index("y")]
                            if a == "":
                                matrix[i].append(1)
                            elif a == "-":
                                matrix[i].append(-1)
                            else:
                                matrix[i].append(int(a))
                            matrix[i].append(0)
                    else:
                        if system[i].index("x") < system[i].index("y") and system[i].index("x") < system[i].index("z"):
                            a = system[i][:system[i].index("x")]
                        elif system[i].index("y") < system[i].index("x") < system[i].index("z"):
                            a = system[i][system[i].index("y") + 1:system[i].index("x")]
                        elif system[i].index("z") < system[i].index("x") < system[i].index("y"):
                            a = system[i][system[i].index("z") + 1:system[i].index("x")]
                        elif system[i].index("y") < system[i].index("x") and system[i].index("x") > system[i].index("z") > system[i].index("y"):
                            a = system[i][system[i].index("z") + 1:system[i].index("x")]
                        elif system[i].index("x") > system[i].index("y") > system[i].index("z") and system[i].index("z") < system[i].index("x"):
                            a = system[i][system[i].index("y") + 1:system[i].index("x")]
                        if a == "+" or a=="":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            if a != "+" and "+" in a:
                                matrix[i].append(int(a[1:]))
                            elif a != "-" and "-" in a:
                                matrix[i].append(int(a))
                            else:
                                matrix[i].append(int(a))
                        if system[i].index("y") < system[i].index("x") and system[i].index("y") < system[i].index("z"):
                            a = system[i][:system[i].index("y")]
                        elif system[i].index("x") < system[i].index("y") < system[i].index("z"):
                            a = system[i][system[i].index("x") + 1:system[i].index("y")]
                        elif system[i].index("z") < system[i].index("y") < system[i].index("x"):
                            a = system[i][system[i].index("z") + 1:system[i].index("y")]
                        elif system[i].index("x") < system[i].index("y") and system[i].index("z") < system[i].index("y") and system[i].index("x") < system[i].index("z"):
                            a = system[i][system[i].index("z") + 1:system[i].index("y")]
                        elif system[i].index("x") < system[i].index("y") and system[i].index("z") < system[i].index("y") and system[i].index("x") > system[i].index("z"):
                            a = system[i][system[i].index("x") + 1:system[i].index("y")]
                        if a == "+":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            if a != "+" and "+" in a:
                                matrix[i].append(int(a[1:]))
                            elif a != "-" and "-" in a:
                                matrix[i].append(int(a))
                            else:
                                matrix[i].append(int(a))
                        if system[i].index("z") < system[i].index("x") and system[i].index("z") < system[i].index("y"):
                            a = system[i][:system[i].index("z")]
                        elif system[i].index("x") < system[i].index("z") < system[i].index("y"):
                            a = system[i][system[i].index("x") + 1:system[i].index("z")]
                        elif system[i].index("y") < system[i].index("z") < system[i].index("x"):
                            a = system[i][system[i].index("y") + 1:system[i].index("z")]
                        elif system[i].index("x") < system[i].index("z") and system[i].index("y") < system[i].index("z") and system[i].index("x") < system[i].index("y"):
                            a = system[i][system[i].index("y") + 1:system[i].index("z")]
                        elif system[i].index("x") < system[i].index("z") and system[i].index("y") < system[i].index("z") and system[i].index("x") > system[i].index("y"):
                            a = system[i][system[i].index("x") + 1:system[i].index("z")]
                        if a == "+" or a=="":
                            matrix[i].append(1)
                        elif a == "-":
                            matrix[i].append(-1)
                        else:
                            if a != "+" and "+" in a:
                                matrix[i].append(int(a[1:]))
                            elif a != "-" and "-" in a:
                                matrix[i].append(int(a))
                            else:
                                matrix[i].append(int(a))
            a = system[i][system[i].index("=") + 1:]
            if "\r" in a:
                matrix[i].append(int(a[:-1]))
            else:
                matrix[i].append(int(a))
        return matrix
    except:
        return "ERROR"


def kramer_2(matrix):
    try:
        matrix_delt = [matrix[0][:2], matrix[1][:2]]
        matrix_deltx = [[matrix[0][2], matrix[0][1]], [matrix[1][2], matrix[1][1]]]
        matrix_delty = [[matrix[0][0], matrix[0][2]], [matrix[1][0], matrix[1][2]]]
        delt_num = (matrix_delt[0][0]*matrix_delt[1][1]) - (matrix_delt[0][1]*matrix_delt[1][0])
        deltx_num = (matrix_deltx[0][0]*matrix_deltx[1][1]) - (matrix_deltx[0][1]*matrix_deltx[1][0])
        delty_num = (matrix_delty[0][0]*matrix_delty[1][1]) - (matrix_delty[0][1]*matrix_delty[1][0])
        delt = f"Δ = a11 * a22 - a12 * a21 = {matrix_delt[0][0]} * {matrix_delt[1][1]} - {matrix_delt[0][1]} * {matrix_delt[1][0]} = {delt_num}"
        deltx = f"Δx = b11 * b22 - b12 * b21 = {matrix_deltx[0][0]} * {matrix_deltx[1][1]} - {matrix_deltx[0][1]} * {matrix_deltx[1][0]} = {deltx_num}"
        delty = f"Δy = c11 * c22 - c12 * c21 = {matrix_delty[0][0]} * {matrix_delty[1][1]} - {matrix_delty[0][1]} * {matrix_delty[1][0]} = {delty_num}"
        x = deltx_num / delt_num
        y = delty_num / delt_num
        x_ans = f"x = Δx / Δ = {deltx_num} / {delt_num} = {x}"
        y_ans = f"y = Δy / Δ = {delty_num} / {delt_num} = {y}"
        return matrix_delt, matrix_deltx, matrix_delty, delt, deltx, delty, delt_num, deltx_num, delty_num,x_ans,y_ans, x, y
    except:
        return "ERROR"


def kramer_3(matrix):
    try:
        matrix_delt = [matrix[0][:3], matrix[1][:3], matrix[2][:3]]
        matrix_deltx = [[matrix[0][3], matrix[0][1], matrix[0][2]], [matrix[1][3], matrix[1][1], matrix[1][2]], [matrix[2][3], matrix[2][1], matrix[2][2]]]
        matrix_delty = [[matrix[0][0], matrix[0][3], matrix[0][2]], [matrix[1][0], matrix[1][3], matrix[1][2]], [matrix[2][0], matrix[2][3], matrix[2][2]]]
        matrix_deltz = [[matrix[0][0], matrix[0][1], matrix[0][3]], [matrix[1][0], matrix[1][1], matrix[1][3]], [matrix[2][0], matrix[2][1], matrix[2][3]]]
        delt_num = (matrix_delt[0][0] * matrix_delt[1][1] * matrix_delt[2][2]) + (matrix_delt[0][1] * matrix_delt[1][2] * matrix_delt[2][0]) + (matrix_delt[0][2] * matrix_delt[1][0] * matrix_delt[2][1]) - (matrix_delt[0][2] * matrix_delt[1][1] * matrix_delt[2][0]) - (matrix_delt[0][1] * matrix_delt[1][0] * matrix_delt[2][2]) - (matrix_delt[0][0] * matrix_delt[1][2] * matrix_delt[2][1])
        deltx_num = (matrix_deltx[0][0] * matrix_deltx[1][1] * matrix_deltx[2][2]) + (matrix_deltx[0][1] * matrix_deltx[1][2] * matrix_deltx[2][0]) + (matrix_deltx[0][2] * matrix_deltx[1][0] * matrix_deltx[2][1]) - (matrix_deltx[0][2] * matrix_deltx[1][1] * matrix_deltx[2][0]) - (matrix_deltx[0][1] * matrix_deltx[1][0] * matrix_deltx[2][2]) - (matrix_deltx[0][0] * matrix_deltx[1][2] * matrix_deltx[2][1])
        delty_num = (matrix_delty[0][0] * matrix_delty[1][1] * matrix_delty[2][2]) + (matrix_delty[0][1] * matrix_delty[1][2] * matrix_delty[2][0]) + (matrix_delty[0][2] * matrix_delty[1][0] * matrix_delty[2][1]) - (matrix_delty[0][2] * matrix_delty[1][1] * matrix_delty[2][0]) - (matrix_delty[0][1] * matrix_delty[1][0] * matrix_delty[2][2]) - (matrix_delty[0][0] * matrix_delty[1][2] * matrix_delty[2][1])
        deltz_num = (matrix_deltz[0][0] * matrix_deltz[1][1] * matrix_deltz[2][2]) + (matrix_deltz[0][1] * matrix_deltz[1][2] * matrix_deltz[2][0]) + (matrix_deltz[0][2] * matrix_deltz[1][0] * matrix_deltz[2][1]) - (matrix_deltz[0][2] * matrix_deltz[1][1] * matrix_deltz[2][0]) - (matrix_deltz[0][1] * matrix_deltz[1][0] * matrix_deltz[2][2]) - (matrix_deltz[0][0] * matrix_deltz[1][2] * matrix_deltz[2][1])
        delt_tr_dp = f"Δ = {matrix_delt[0][0]} * {matrix_delt[1][1]} * {matrix_delt[2][2]} + {matrix_delt[0][1]} * {matrix_delt[1][2]} * {matrix_delt[2][0]} + {matrix_delt[0][2]} * {matrix_delt[1][0]} * {matrix_delt[2][1]} - {matrix_delt[0][2]} * {matrix_delt[1][1]} * {matrix_delt[2][0]} - {matrix_delt[0][1]} * {matrix_delt[1][0]} * {matrix_delt[2][2]} - {matrix_delt[0][0]} * {matrix_delt[1][2]} * {matrix_delt[2][1]} = {delt_num}"
        deltx_tr_dp = f"Δx = {matrix_deltx[0][0]} * {matrix_deltx[1][1]} * {matrix_deltx[2][2]} + {matrix_deltx[0][1]} * {matrix_deltx[1][2]} * {matrix_deltx[2][0]} + {matrix_deltx[0][2]} * {matrix_deltx[1][0]} * {matrix_deltx[2][1]} - {matrix_deltx[0][2]} * {matrix_deltx[1][1]} * {matrix_deltx[2][0]} - {matrix_deltx[0][1]} * {matrix_deltx[1][0]} * {matrix_deltx[2][2]} - {matrix_deltx[0][0]} * {matrix_deltx[1][2]} * {matrix_deltx[2][1]} = {deltx_num}"
        delty_tr_dp = f"Δy = {matrix_delty[0][0]} * {matrix_delty[1][1]} * {matrix_delty[2][2]} + {matrix_delty[0][1]} * {matrix_delty[1][2]} * {matrix_delty[2][0]} + {matrix_delty[0][2]} * {matrix_delty[1][0]} * {matrix_delty[2][1]} - {matrix_delty[0][2]} * {matrix_delty[1][1]} * {matrix_delty[2][0]} - {matrix_delty[0][1]} * {matrix_delty[1][0]} * {matrix_delty[2][2]} - {matrix_delty[0][0]} * {matrix_delty[1][2]} * {matrix_delty[2][1]} = {delty_num}"
        deltz_tr_dp = f"Δz = {matrix_deltz[0][0]} * {matrix_deltz[1][1]} * {matrix_deltz[2][2]} + {matrix_deltz[0][1]} * {matrix_deltz[1][2]} * {matrix_deltz[2][0]} + {matrix_deltz[0][2]} * {matrix_deltz[1][0]} * {matrix_deltz[2][1]} - {matrix_deltz[0][2]} * {matrix_deltz[1][1]} * {matrix_deltz[2][0]} - {matrix_deltz[0][1]} * {matrix_deltz[1][0]} * {matrix_deltz[2][2]} - {matrix_deltz[0][0]} * {matrix_deltz[1][2]} * {matrix_deltz[2][1]} = {deltz_num}"
        x = deltx_num / delt_num
        y = delty_num / delt_num
        z = deltz_num / delt_num
        ans_x = f"x = Δx/Δ = {deltx_num} / {delt_num} = {x}"
        ans_y = f"y = Δy/Δ = {delty_num} / {delt_num} = {y}"
        ans_z = f"z = Δz/Δ = {deltz_num} / {delt_num} = {z}"
        return matrix_delt, matrix_deltx, matrix_delty, matrix_deltz, delt_tr_dp, deltx_tr_dp, delty_tr_dp, deltz_tr_dp, delt_num, deltx_num, delty_num,deltz_num,ans_x,ans_y,ans_z, x, y, z
    except:
        return "ERROR"


def answer_kramer(system):
    try:
        systems = system.split()
    except:
        return "ERROR"
    try:
        if len(systems) == 2:
            matrix_delt, matrix_deltx, matrix_delty, delt, deltx, delty, delt_num, deltx_num, delty_num,x_ans,y_ans, x, y = kramer_2(matrix_2(systems))
            matrix = matrix_2(systems)
            return ["Матрица:", '\n'.join('  '.join(map(str, row)) for row in matrix), "Определитель:",
                    '\n'.join('  '.join(map(str, row)) for row in matrix_delt), "Определитель X:",
                    '\n'.join('  '.join(map(str, row)) for row in matrix_deltx), "Определитель Y:",
                    '\n'.join('  '.join(map(str, row)) for row in matrix_delty),delt,deltx,delty,x_ans,y_ans,x,y,f"({matrix[0][2]} + {-1 * matrix[0][0]} * x) / {matrix[0][1]}", f"({matrix[1][2]} + {-1 * matrix[1][0]} * x) / {matrix[1][1]}"]
        else:
            matrix_delt, matrix_deltx, matrix_delty, matrix_deltz, delt_tr_dp, deltx_tr_dp, delty_tr_dp, deltz_tr_dp, delt_num, deltx_num, delty_num,deltz_num,ans_x,ans_y,ans_z, x, y, z = kramer_3(matrix_3(systems))
            matrix = matrix_3(systems)
            return ["Матрица:", '\n'.join('  '.join(map(str, row)) for row in matrix), "Определитель:",
                        '\n'.join('  '.join(map(str, row)) for row in matrix_delt), "Определитель X:",
                        '\n'.join('  '.join(map(str, row)) for row in matrix_deltx), "Определитель Y:",
                        '\n'.join('  '.join(map(str, row)) for row in matrix_delty), "Определитель Z:",
                        '\n'.join('  '.join(map(str, row)) for row in matrix_deltz),
                        delt_tr_dp,deltx_tr_dp,delty_tr_dp,deltz_tr_dp,ans_x,ans_y,ans_z,x,y,z]
    except:
        return "ERROR"


def matrix_method(matrix):
    try:
        matrix_delt = [matrix[0][:3], matrix[1][:3], matrix[2][:3]]
        delt_num = ((matrix_delt[0][0] * matrix_delt[1][1] * matrix_delt[2][2]) +
                    (matrix_delt[0][1] * matrix_delt[1][2] * matrix_delt[2][0]) +
                    (matrix_delt[0][2] * matrix_delt[1][0] * matrix_delt[2][1]) -
                    (matrix_delt[0][2] * matrix_delt[1][1] * matrix_delt[2][0]) -
                    (matrix_delt[0][1] * matrix_delt[1][0] * matrix_delt[2][2]) -
                    (matrix_delt[0][0] * matrix_delt[1][2] * matrix_delt[2][1]))
        delt_tr_dp = f"Δ = {matrix_delt[0][0]} * {matrix_delt[1][1]} * {matrix_delt[2][2]} + {matrix_delt[0][1]} * {matrix_delt[1][2]} * {matrix_delt[2][0]} + {matrix_delt[0][2]} * {matrix_delt[1][0]} * {matrix_delt[2][1]} - {matrix_delt[0][2]} * {matrix_delt[1][1]} * {matrix_delt[2][0]} - {matrix_delt[0][1]} * {matrix_delt[1][0]} * {matrix_delt[2][2]} - {matrix_delt[0][0]} * {matrix_delt[1][2]} * {matrix_delt[2][1]} = {delt_num}"
        if delt_num != 0:
            A = [matrix[0][3],matrix[1][3],matrix[2][3]]
            a11 = ((matrix[1][1] * matrix[2][2]) - (matrix[2][1] * matrix[1][2]))
            a12 = -1*((matrix[1][0] * matrix[2][2]) - (matrix[2][0] * matrix[1][2]))
            a13 = ((matrix[1][0] * matrix[2][1]) - (matrix[2][0] * matrix[1][1]))
            a21 = -1*((matrix[0][1] * matrix[2][2]) - (matrix[2][1] * matrix[0][2]))
            a22 = ((matrix[0][0] * matrix[2][2]) - (matrix[2][0] * matrix[0][2]))
            a23 = -1*((matrix[0][0] * matrix[2][1]) - (matrix[2][0] * matrix[0][1]))
            a31 = ((matrix[0][1] * matrix[1][2]) - (matrix[1][1] * matrix[0][2]))
            a32 = -1*((matrix[0][0] * matrix[1][2]) - (matrix[1][0] * matrix[0][2]))
            a33 = ((matrix[0][0] * matrix[1][1]) - (matrix[1][0] * matrix[0][1]))
            B = [f"a11 = b22 * b33 - b32 * b23 = {matrix[1][1]} * {matrix[2][2]} - {matrix[2][1]} * {matrix[1][2]} = {a11}",
               f"a12 = b21 * b33 - b31 * b23 = -1 * {matrix[1][0]} * {matrix[2][2]} - {matrix[2][0]} * {matrix[1][2]} = {a12}",
               f"a13 = b21 * b32 - b31 * b22 = {matrix[1][0]} * {matrix[2][1]} - {matrix[2][0]} * {matrix[1][1]} = {a13}",
               f"a21 = b12 * b33 - b32 * b13 = -1 * {matrix[0][1]} * {matrix[2][2]} - {matrix[2][1]} * {matrix[0][2]} = {a21}",
               f"a22 = b11 * b33 - b31 * b13 = {matrix[0][0]} * {matrix[2][2]} - {matrix[2][0]} * {matrix[0][2]} = {a22}",
               f"a23 = b11 * b32 - b31 * b12 = -1 * {matrix[0][0]} * {matrix[2][1]} - {matrix[2][0]} * {matrix[0][1]} = {a23}",
               f"a31 = b12 * b23 - b22 * b13 = {matrix[0][1]} * {matrix[1][2]} - {matrix[1][1]} * {matrix[0][2]} = {a31}",
               f"a32 = b11 * b23 - b21 * b13 = -1 * {matrix[0][0]} * {matrix[1][2]} - {matrix[1][0]} * {matrix[0][2]} = {a32}",
               f"a33 = b11 * b22 - b21 * b12 = {matrix[0][0]} * {matrix[1][1]} - {matrix[1][0]} * {matrix[0][1]} = {a33}",]
            C = [[a11,a12,a13],[a21,a22,a23],[a31,a32,a33]]
            D = [[a11,a21,a31],[a12,a22,a32],[a13,a23,a33]]
            d11 = a11 * A[0] + a21 * A[1] + a31 * A[2]
            d21 = a12 * A[0] + a22 * A[1] + a32 * A[2]
            d31 = a13 * A[0] + a23 * A[1] + a33 * A[2]
            E = [f"d11 = b11 * c11 + b21 * c21 + b31 * c31 = {a11} * {A[0]} + {a21} * {A[1]} + {a31} * {A[2]} = {d11}",
                 f"d21 = b12 * c11 + b22 * c21 + b32 * c31 = {a12} * {A[0]} + {a22} * {A[1]} + {a32} * {A[2]} = {d21}",
                 f"d31 = b13 * c11 + b23 * c21 + b33 * c31 = {a13} * {A[0]} + {a23} * {A[1]} + {a33} * {A[2]} = {d31}"
                ]
            x = d11 / delt_num
            y = d21 / delt_num
            z = d31 / delt_num
            F = [f"x = d11 / delta = {d11} / {delt_num} = {x}",
                 f"y = d21 / delta = {d21} / {delt_num} = {y}",
                 f"z = d31 / delta = {d31} / {delt_num} = {z}"
                ]
            return ["Матрица:",'\n'.join('  '.join(map(str, row)) for row in matrix), "Опредилитель:",'\n'.join('  '.join(map(str, row)) for row in matrix_delt),delt_tr_dp, "Матрица свободных коофициентов:",A, "Элементы матрицы A^*:",'\n'.join(''.join(map(str, row)) for row in B), "A^*:", '\n'.join(' '.join(map(str, row)) for row in C),"(A^*)^T:", '\n'.join(' '.join(map(str, row)) for row in D), "Матрица свободных коофициентов * на (A^*)^T:",'\n'.join(''.join(map(str, row)) for row in E), '\n'.join(''.join(map(str, row)) for row in F), x,y,z]

        else:
            return ["It is impossible to do it using the matrix method. Because the delta is zero", matrix_delt, delt_tr_dp, delt_num]
    except:
        return "ERROR"

def add_data_to_file(matrix):
    data=pd.DataFrame({"X":[matrix[0][0], matrix[1][0]], "Y":[matrix[0][1], matrix[1][1]], "Свободные коэффициенты":[matrix[0][2], matrix[1][2]]})
    if not os.path.exists('Systems.excel'):
        open('Systems.excel', 'w').close()
    else:
        try:
            df = pd.read_excel('Systems.excel')
            new_df = pd.concat([df, data], ignore_index=True)
            new_df.to_excel('Systems.excel', index=False)
        except:
            print('ERROR')


def read_data_excel():
    return pd.read_excel('Systems.excel').values.tolist()


def del_excel():
    try:
        pd.concat("", ignore_index=True).to_excel('Systems.excel', index=False)
    except:
        print('ERROR')
